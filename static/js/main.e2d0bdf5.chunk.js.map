{"version":3,"sources":["components/TodoItem.js","App.js","reportWebVitals.js","index.js"],"names":["TodoItem","todos","todo","setTodos","todotext","useState","styling","setStyle","className","style","onClick","opacity","textDecoration","class","filter","i","id","App","text","setText","useEffect","togetLocalTodos","savingLocalTodos","localStorage","setItem","JSON","stringify","getItem","localTodos","parse","type","value","placeholder","onChange","e","target","preventDefault","console","log","Math","random","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gQA6BeA,MA1Bf,YAAwD,IAApCC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,SACzC,EAA4BC,mBAAS,IAArC,mBAAOC,EAAP,KAAgBC,EAAhB,KASA,OACE,sBAAKC,UAAU,WAAf,UACE,qBAAKA,UAAU,UAAf,SACE,mBAAGC,MAAOH,EAAV,SAAoBF,MAEtB,wBAAQI,UAAU,MAAME,QAbR,WAClB,OAAOH,EAAS,CAAEI,QAAS,MAAOC,eAAgB,kBAYhD,SAA8C,sBAAMC,MAAM,iBAAZ,qBAG9C,wBAAQL,UAAU,MAAME,QAbP,WAEnBP,EAASF,EAAMa,QAAO,SAACC,GAAD,OAAOA,EAAEC,KAAOd,EAAKc,QAWzC,SAA+C,sBAAMH,MAAM,iBAAZ,0BCsCtCI,MAvDf,WACE,MAAwBZ,mBAAS,IAAjC,mBAAOa,EAAP,KAAaC,EAAb,KACA,EAA0Bd,mBAAS,IAAnC,mBAAOJ,EAAP,KAAcE,EAAd,KAcAiB,qBAAU,WACRC,MACA,IAEFD,qBAAU,WACRE,MACA,CAACrB,IAEH,IAAMqB,EAAmB,WACvBC,aAAaC,QAAQ,QAASC,KAAKC,UAAUzB,KAEzCoB,EAAkB,WACtB,GAAmC,OAAhCE,aAAaI,QAAQ,SACtBJ,aAAaC,QAAQ,QAASC,KAAKC,UAAU,SAE3C,CACF,IAAIE,EAAaH,KAAKI,MAAMN,aAAaI,QAAQ,UACjDxB,EAASyB,KAGb,OACE,sBAAKpB,UAAU,SAAf,UACE,oBAAIA,UAAU,UAAd,yBACA,sBAAKA,UAAU,OAAf,UACE,uBAAMA,UAAU,OAAhB,UACE,uBAAOA,UAAU,WAAWsB,KAAK,OAAOC,MAAOb,EAAMc,YAAY,iBAAiBC,SAtCjE,SAACC,GACxB,OAAOf,EAAQe,EAAEC,OAAOJ,UAsClB,uBAAOvB,UAAU,YAAYE,QApChB,SAACwB,GACpBA,EAAEE,iBACFC,QAAQC,IAAI,wBAA0BpB,GACtCf,EAAS,GAAD,mBAAKF,GAAL,CAAY,CAAEG,SAAUc,EAAMF,GAAoB,GAAhBuB,KAAKC,aAC/CrB,EAAQ,KAgCkDW,KAAK,SAASC,MAAM,cAE1E,oBAAIvB,UAAU,aAAd,wBACCP,EAAMwC,KAAI,SAACvC,GACV,OACE,cAAC,EAAD,CAAwBD,MAAOA,EAAOC,KAAMA,EAAMC,SAAUA,EAAUC,SAAUF,EAAKE,UAAtEF,EAAKc,cCvCjB0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e2d0bdf5.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './TodoItem.css';\r\n\r\nfunction TodoItem({ todos, todo, setTodos, todotext }) {\r\n  const [styling, setStyle] = useState({});\r\n  const handleStyle = () => {\r\n    return setStyle({ opacity: \"0.5\", textDecoration: \"line-through\" });\r\n  }\r\n  const handleDelete = () => {\r\n    // i is current element\r\n    setTodos(todos.filter((i) => i.id !== todo.id))  //filter will make new array by following given statement.. \r\n    //here new array will be made of those element whose id not equals to current todo's id so this will basically eliminate the clicked item\r\n  }\r\n  return (\r\n    <div className=\"todoitem\">\r\n      <div className=\"todoTxt\">\r\n        <p style={styling}>{todotext}</p>\r\n      </div>\r\n      <button className=\"btn\" onClick={handleStyle}><span class=\"material-icons\">\r\n        check\r\n      </span></button>\r\n      <button className=\"btn\" onClick={handleDelete}><span class=\"material-icons\">\r\n        delete\r\n      </span>\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TodoItem\r\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport TodoItem from './components/TodoItem';\n\nfunction App() {\n  const [text, setText] = useState(\"\");\n  const [todos, setTodos] = useState([]);\n  const handleTextChange = (e) => {\n    return setText(e.target.value);\n  }\n  const handleCreate = (e) => {\n    e.preventDefault();\n    console.log(\"Inside handle create \" + text);\n    setTodos([...todos, { todotext: text, id: Math.random() * 10 }]);\n    setText(\"\");\n    return\n  }\n\n  //Below are stepps to Save todo data to local storage and then get from local storage.. so that after refresh also data will not be lost\n\n  useEffect(() => {\n    togetLocalTodos();\n  },[]) // empty array coz we want it to run only once when app started  and it should be run before savingLocal function\n\n  useEffect(() => {\n    savingLocalTodos();   //when todos state changes this will run\n  },[todos])\n\n  const savingLocalTodos = () => {\n    localStorage.setItem('todos', JSON.stringify(todos)); // saving our todos to local storage\n  }\n  const togetLocalTodos = () => {\n    if(localStorage.getItem('todos')===null){\n      localStorage.setItem('todos', JSON.stringify([])); // when no data present display empty  \n    }\n    else{\n      let localTodos = JSON.parse(localStorage.getItem('todos'));\n      setTodos(localTodos); // when data present then display the stored data to current state using setTodos\n    }\n  }\n  return (\n    <div className=\"Header\">\n      <h2 className=\"Heading\">My TODO App</h2>\n      <div className=\"Body\">\n        <form className=\"form\">\n          <input className=\"inputTxt\" type=\"text\" value={text} placeholder=\"Type your TODO\" onChange={handleTextChange}></input>\n          <input className=\"SubmitBtn\" onClick={handleCreate} type=\"submit\" value=\"Create\"></input>\n        </form>\n        <h3 className=\"midHeading\">Your TODOs</h3>\n        {todos.map((todo) => {\n          return (\n            <TodoItem key={todo.id} todos={todos} todo={todo} setTodos={setTodos} todotext={todo.todotext} />\n          )\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}